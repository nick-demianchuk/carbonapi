listen: ":8000"
listenInternal: ":7000"
maxProcs: 0
# graphite:
#     host: "localhost:2003"
#     interval: "60s"
#     prefix: "carbon.zipper"
#     # defines pattern of metric name. If present, {prefix} will be replaced with content of "prefix", {fqdn} with fqdn
#     pattern: "{prefix}.{fqdn}"

# Number of 100ms buckets to track request distribution in. Used to build
# 'carbon.zipper.hostname.requests_in_0ms_to_100ms' metric and friends.
buckets: 10

timeouts:
    # Maximum total backend requesting timeout in ms.
    # ( How long we may spend making requests. )
    global: "100s"
    # Timeout, in ms, once the final backend has been contacted.
    # ( [Effectively] How long we'll wait for the slowest response. )
    afterStarted: "200s"
    # Timeout to connect to the server
    connect: "200ms"

# Number of concurrent requests to any given backend - default is no limit.
# If set, you likely want >= MaxIdleConnsPerHost
concurrencyLimit: 2048

# Configures how often keep alive packets will be sent out
keepAliveInterval: "30s"

# Control http.MaxIdleConnsPerHost. Large values can lead to more idle
# connections on the backend servers which may bump into limits; tune with care.
maxIdleConnsPerHost: 100

# If not zero, enabled cache for find requests
# This parameter controls when it will expire (in seconds)
# Default: 600 (10 minutes)
expireDelaySec: 120

# In addition to first namespace of metrics as TLDs, zipper tries
# to query for namespaces of these prefixes. This is helpful if some metrics
# are not divided in the backends by only the first namespace.
# e.g. by configuring:
#
# tldCacheExtraPrefixes:
#   - carbon
#
# zipper sends 'carbon.*' find query to the 'carbon' tld backends, and extracts 'carbon.agents'
# and any other trailing namespaces of 'carbon' from them.

# "http://host:port" array of instances of carbonserver stores
# This is the *ONLY* config element that MUST be specified.
backendsByDC:
    - name: "dc1"
      clusters:
          - name: "sys"
            protocolBackends:
            # for each backend, zipper uses the gRPC endpoint if it is defined in the config
            # and implemented in the code. Otherwise, it falls back to the http endpoint.
            - grpc: "go-carbon:7004"
              http: "http://go-carbon:8080"

#backendsByCluster:
#    - name: "sys"
#      backends:
#      - "http://go-carbon:8080"

#backends:
#    - "http://go-carbon:8080"

# Enable compatibility with graphite-web 0.9
# This will affect graphite-web 1.0+ with multiple cluster_servers
# Default: disabled
graphite09compat: true

# Configuration for the logger
# It's possible to specify multiple logger outputs with different loglevels and encodings
# Logger is logrotate-compatible, you can freely move or rename or delete files, it will create
# new one automatically
loggerConfig:
  outputPaths: ["stdout"]
  level: "info"
  encoding: "json"

monitoring:
    timeInQueueExpHistogram:
        start: 0.05
        bucketsNum: 25
        bucketSize: 2
    requestDurationExpHistogram:
        start: 0.05
        bucketsNum: 20
        bucketSize: 2
    requestDurationLinHistogram:
        start: 0.0
        bucketsNum: 40
        bucketSize: 0.05
